diff --git a/game_projects/Ca2/Efx.cpp b/game_projects/Ca2/Efx.cpp
index b711041..788f85e 100644
--- a/game_projects/Ca2/Efx.cpp
+++ b/game_projects/Ca2/Efx.cpp
@@ -27,6 +27,10 @@ Efx::Efx() {
 	shakeDuration = 0;
 	nextTweenId = 0;
 
+	// get the original viewport so screenshake sets it correctly
+	int w, h;
+	fbl_get_viewport(&viewPortX, &viewPortY, &w, &h);
+
 	std::cout << "Initialized Efx subsystem." << std::endl;
 }
 
@@ -117,7 +121,7 @@ void Efx::tickCameraShake() {
 
 	if (shakeDuration > 1) {
 		x = y = rand() % shakeIntensity; // -shakeIntensity / 2;
-		fbl_set_viewport(x, y, Game::LogicalResW, Game::LogicalResH);
+		fbl_set_viewport(viewPortX + x, viewPortY + y, Game::LogicalResW, Game::LogicalResH);
 		shakeDuration--;
 
 		// gradually decrease intensity
@@ -126,7 +130,7 @@ void Efx::tickCameraShake() {
 
 	}
 	else if (shakeDuration == 1) {
-		fbl_set_viewport(0, 0, Game::LogicalResW, Game::LogicalResH);
+		fbl_set_viewport(viewPortX, viewPortY, Game::LogicalResW, Game::LogicalResH);
 		shakeDuration = 0;
 	}
 
@@ -134,7 +138,7 @@ void Efx::tickCameraShake() {
 
 void Efx::initExplosion() {
 	// create the particles
-	explosionId = fbl_create_emitter(200);	// create emitter with 200 particles, creating a mezmerizing nebulosa :)
+	explosionId = fbl_create_emitter(150);	// create emitter with 150 particles, creating a mezmerizing nebulosa :)
 	fbl_set_emitter_params(explosionId, FBL_EMITTER_FLOWER, 10, 10, 100, 1, 3, 0.3, 1.5);
 	fbl_set_emitter_particle_shape(explosionId, FBL_NO_PRIM, 448, 128, 64, 64);	// use particle image instead of prim
 	fbl_set_emitter_active(explosionId, false);
@@ -165,7 +169,7 @@ void Efx::tickExplosion() {
 void Efx::initCoinEfx() {
 
 	// create the particles
-	coinEfxId = fbl_create_emitter(100);	// create emitter with 100 particles
+	coinEfxId = fbl_create_emitter(50);	// create emitter with 50 particles
 	fbl_set_emitter_color(coinEfxId, 255, 224, 0, 255, true);
 	fbl_set_emitter_color(coinEfxId, 255, 253, 234, 0, false);
 	fbl_set_emitter_params(coinEfxId, FBL_EMITTER_FLOWER, 5, 5, 30, 1, 3, 0.3, 1.0);
diff --git a/game_projects/Ca2/Efx.hpp b/game_projects/Ca2/Efx.hpp
index d89de20..923d822 100644
--- a/game_projects/Ca2/Efx.hpp
+++ b/game_projects/Ca2/Efx.hpp
@@ -72,6 +72,8 @@ class Efx : public IObserver{
         uint16_t explosionId, explodeDuration;  // explosion things
         uint16_t coinEfxId, coinEfxDuration;  // coin things
 
+        int viewPortX, viewPortY;
+
         // add more of these
         float easeOut(float t);
         float elasticOut(float t);
diff --git a/game_projects/Ca2/GameState/Maintenance.cpp b/game_projects/Ca2/GameState/Maintenance.cpp
index 2754440..8a08548 100644
--- a/game_projects/Ca2/GameState/Maintenance.cpp
+++ b/game_projects/Ca2/GameState/Maintenance.cpp
@@ -967,7 +967,7 @@ void Maintenance::getInput(Game& g) {
 	}
 
 	// Sequencer input
-	if (fbl_get_ui_elem_val(mSeq.arrowLeftId) || fbl_get_key_down(FBLK_LEFT) && mKeyDelayLeft[0] == 0) {
+	if (fbl_get_ui_elem_val(mSeq.arrowLeftId) || (fbl_get_key_down(FBLK_LEFT) && mKeyDelayLeft[0] == 0)) {
 		if (mSeq.checkDuration == 0) {
 
 			// find next mimic arrow
@@ -990,7 +990,7 @@ void Maintenance::getInput(Game& g) {
 		}
 
 	}
-	if (fbl_get_ui_elem_val(mSeq.arrowRightId) || fbl_get_key_down(FBLK_RIGHT) && mKeyDelayLeft[1] == 0) {
+	if (fbl_get_ui_elem_val(mSeq.arrowRightId) || (fbl_get_key_down(FBLK_RIGHT) && mKeyDelayLeft[1] == 0)) {
 		if (mSeq.checkDuration == 0) {
 
 			// find next mimic arrow
diff --git a/project_vs2019/.vs/fbl_project/v16/.suo b/project_vs2019/.vs/fbl_project/v16/.suo
index 4902420..e101373 100644
Binary files a/project_vs2019/.vs/fbl_project/v16/.suo and b/project_vs2019/.vs/fbl_project/v16/.suo differ
diff --git a/project_vs2019/x64/Release/assets/Ca2Dialogue.lua b/project_vs2019/x64/Release/assets/Ca2Dialogue.lua
index 9986e9c..1e2acf1 100644
--- a/project_vs2019/x64/Release/assets/Ca2Dialogue.lua
+++ b/project_vs2019/x64/Release/assets/Ca2Dialogue.lua
@@ -216,9 +216,23 @@ local iter = 1
 while true do
 	if iter == 1 then
 		if not g_wait_response then
-			disp_dw("Hello! I am the info-slime", "I will inform you about", "important things..", "Good stuff..", " ")
+			disp_dw("Hello! I am the info-slime", "I will inform you about..", "..things...", "Good stuff..", " ")
 		elseif getResponse() == OK then
-			iter = advance(Explore, 1) -- reset dialogue and go to Explore state
+			iter = advance(Stay, iter + 1) -- reset dialogue and go to Explore state
+		end
+	elseif iter == 2 then
+		if not g_wait_response then
+			disp_dw("I will also arrange ROBOT MAINTENANCE.", "It's a risk reward deal.", "Wanna try?", "Lets do it", "No way")
+		elseif getResponse() == NO then
+			iter = advance(Explore, 1)
+		elseif getResponse() == YES then
+			iter = advance(Maintenance, iter + 1) -- run maintenance and advance to next dialog
+		end
+	elseif iter == 3 then
+		if not g_wait_response then
+			disp_dw("I have nothing more to tell you.", "Go and find other, wiser info slimes", " ", "Ok", " ")
+		elseif getResponse() == OK then
+			iter = advance(Explore, 3) -- go to explore and stay at this option
 		end
 	end
 
diff --git a/project_vs2019/x64/Release/robot_assets/fbl.lua b/project_vs2019/x64/Release/robot_assets/fbl.lua
index ebe1068..e20f215 100644
--- a/project_vs2019/x64/Release/robot_assets/fbl.lua
+++ b/project_vs2019/x64/Release/robot_assets/fbl.lua
@@ -214,6 +214,7 @@ int  fbl_get_screen_h(void);
 int  fbl_get_device_res(int* w, int* h);
 int  fbl_set_render_scale(float scale_x, float scale_y);
 int  fbl_set_viewport(int x, int y, int w, int h);
+void fbl_get_viewport(int *x, int *y, int *w, int *h);
 int  fbl_set_render_logical_size(int x, int y);
 void fbl_set_fps(int fps);
 int  fbl_get_fps(void);
diff --git a/src/fbl.c b/src/fbl.c
index 5fcd455..b8e77fa 100644
--- a/src/fbl.c
+++ b/src/fbl.c
@@ -501,6 +501,20 @@ int fbl_set_viewport(int x, int y, int w, int h)
 
 }
 
+void fbl_get_viewport(int *x, int *y, int *w, int *h)
+{
+
+	SDL_Rect rect;
+
+	SDL_RenderGetViewport(fbl_engine.renderer, &rect);
+
+	*x = rect.x;
+	*y = rect.y;
+	*w = rect.w;
+	*h = rect.h;
+
+}
+
 /* Set a device independent resolution for rendering */
 
 int fbl_set_render_logical_size(int x, int y)
diff --git a/src/fbl.h b/src/fbl.h
index e38f7f5..8d04be2 100644
--- a/src/fbl.h
+++ b/src/fbl.h
@@ -275,6 +275,7 @@ int  fbl_get_screen_h(void);
 int  fbl_get_device_res(int* w, int* h);
 int  fbl_set_render_scale(float scale_x, float scale_y);
 int  fbl_set_viewport(int x, int y, int w, int h);
+void fbl_get_viewport(int* x, int* y, int* w, int* h);
 int  fbl_set_render_logical_size(int x, int y);
 void fbl_set_fps(int fps);
 int  fbl_get_fps(void);
diff --git a/src/lua.c b/src/lua.c
index 42975ec..c5fe4b7 100644
--- a/src/lua.c
+++ b/src/lua.c
@@ -38,6 +38,7 @@ int lua_get_screen_h(lua_State *lua_env);
 int lua_get_device_res(lua_State* lua_env);
 int lua_set_render_scale(lua_State* lua_env);
 int lua_set_viewport(lua_State* lua_env);
+int lua_get_viewport(lua_State* lua_env);
 int lua_set_render_logical_size(lua_State* lua_env);
 int lua_set_fps(lua_State *lua_env);
 int lua_get_fps(lua_State *lua_env);
@@ -383,6 +384,7 @@ void register_fbl_functions_to_lua()
 	lua_register(fbl_lua_env, "fbl_get_device_res", lua_get_device_res);
 	lua_register(fbl_lua_env, "fbl_set_render_scale", lua_set_render_scale);
 	lua_register(fbl_lua_env, "fbl_set_viewport", lua_set_viewport);
+	lua_register(fbl_lua_env, "fbl_get_viewport", lua_get_viewport);
 	lua_register(fbl_lua_env, "fbl_set_render_logical_size", lua_set_render_logical_size);
 	lua_register(fbl_lua_env, "fbl_set_fps", lua_set_fps);
 	lua_register(fbl_lua_env, "fbl_get_fps", lua_get_fps);
@@ -773,6 +775,22 @@ int lua_set_viewport(lua_State* lua_env)
 
 }
 
+int lua_get_viewport(lua_State* lua_env)
+{
+
+	int x, y, w, h;
+
+	fbl_get_viewport(&x, &y, &w, &h);
+
+	lua_pushnumber(lua_env, (lua_Number)x);
+	lua_pushnumber(lua_env, (lua_Number)y);
+	lua_pushnumber(lua_env, (lua_Number)w);
+	lua_pushnumber(lua_env, (lua_Number)h);
+
+	return 4;
+
+}
+
 int lua_set_render_logical_size(lua_State* lua_env)
 {
 
