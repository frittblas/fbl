Proof of concept fbl-game-demo written entirely in Lua.

This is considered finished as a demo.

One thing that's a bit weird if that you will have to resize
the pathfinding map to fit this game as the reall C++ Ca2 is also using pathing.

Todo for robotgame:

name game (successor to charming alarming) done!

Charming Alarming

	2

reasonable robots


Figure out optimal tilemapsize (800x864 res seems good, change and recompile) - done
also change num chars in a_star.h and tilemap size - done

Implement random maze thing - in progress, done!
Add pathfinding for up to 4 robots - done!

Make state-machine, handling game states. DONE!

Implement the choosing of a starting point and 4 robot action. DONE!


Make dialogue-system. Almost done (ridiculous crash physics phantom crash, SOLVED! (internal fbl bug chipmunk activate prim))
Make a global flag reset_dialogue, to make all the coroutines break out of the while-loop and start over from the top.

Left to do:

Make a music theme (for each robot? yes). on da way..
Load all text in the beginning and activate/deactivade as needed. DONE only for big text.

Make game fun and reasonably interactive.


GAMEPLAY FUN-NESS:

Player can pick a team of 5 robots from a pool of alot. Each
have different speed, defense, other stats, music theme, sprite, personality.
The robots can be bought, and can be leveled up to 5? Each level unlocks a new
skill (i.e new weapon)
These can be encountered in the exploration mode.

Also:

Who should be main character? CA? kloz? slime?

Keep a lua table with all the robots' stats (and coroutine dialogue?) available in all modes.

Exploration state:
Make gameplay for exploration. Dialogue system with coroutines. Basics done!
Make pathfind movement in exploration with mouseclick/touch.
Make suuper simple tilemap editor that outputs lua code with create_sprite and set_sprite_xy. Done.
Find a way to put the dragon quest slime in the game.


Customisation state:
Make gameplay for customisation (customize your teamz order etc.)


Run maze state:
Add coins randomly in the maze to be picked up, adds extra strategy.
Also add traps. Fewer traps than coins.

Small things:
Remove the printf in fbl when sorting sprites (update_refs?) Done!

Use particle effects as much as possible. :) camera shake? yes?

prefix filescope local variables with f_ and real globals with g_

Add laser (raycasting). Done.

The robots and maze-tiles could be kinematic physics objects.
